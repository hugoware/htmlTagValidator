/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */

"use strict";

function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleFunctions = { start: peg$parsestart },
      peg$startRuleFunction  = peg$parsestart,

      peg$c0 = function(dt, st) {
          var doct = null;
          if (dt !== null) {
            if (dt.error != null) {
              return error(dt.error);
            }
            doct = dt.value;
          }
          return {
            'doctype': doct,
            'document': st
          };
        },
      peg$c1 = peg$otherExpectation("HTML DOCTYPE"),
      peg$c2 = "<!",
      peg$c3 = peg$literalExpectation("<!", false),
      peg$c4 = "<",
      peg$c5 = peg$literalExpectation("<", false),
      peg$c6 = "iframe",
      peg$c7 = peg$literalExpectation("iframe", false),
      peg$c8 = peg$anyExpectation(),
      peg$c9 = /^[a-zA-Z]/,
      peg$c10 = peg$classExpectation([["a", "z"], ["A", "Z"]], false, false),
      peg$c11 = /^[^>]/,
      peg$c12 = peg$classExpectation([">"], true, false),
      peg$c13 = ">",
      peg$c14 = peg$literalExpectation(">", false),
      peg$c15 = function(ls, dt, ex) { return _u.tagify(dt) === 'doctype'; },
      peg$c16 = function(ls, dt, ex) {
          if (ls === null || _u.textNode(ls) === '') {
            if (_u.tagify(ex) === 'html') {
              return {
                'value': _u.tagify(ex)
              };
            }
            return {
              'error': "The " + esc('DOCTYPE') +
                       " definition for an HTML 5 document should be " + esc.val('html')
            };
          }
          return {
            'error': "The " + esc('DOCTYPE') +
                     " definition must be placed at the beginning of the first line of the document"
          };
        },
      peg$c17 = peg$otherExpectation("Content"),
      peg$c18 = function(c) { return c; },
      peg$c19 = peg$otherExpectation("Node"),
      peg$c20 = function(n) { return n; },
      peg$c21 = peg$otherExpectation("Node Types"),
      peg$c22 = peg$otherExpectation("Comment Node Types"),
      peg$c23 = peg$otherExpectation("HTML Tag"),
      peg$c24 = peg$otherExpectation("IFRAME Element"),
      peg$c25 = function(iot, ic, ict) { return _u.has(['iframe'], iot.name); },
      peg$c26 = function(iot, ic, ict) { return ict === null || iot.name === ict.name; },
      peg$c27 = function(iot, ic, ict) {
          var err;
          if ((err = validateSpecialTag(iot, ic, ict)) !== true) {
            return error(err.error);
          } else if ((err = isValidChildren(iot.name, iot.attributes, ic)) !== true) {
            return error(err.error);
          }
          return {
            'type': iot.name,
            'attributes': iot.attributes,
            'contents': ic
          };
        },
      peg$c28 = peg$otherExpectation("Non-parsed Element"),
      peg$c29 = function(sot, sc, sct) { return _u.has(['script', 'style', 'title'], sot.name); },
      peg$c30 = function(sot, sc, sct) {
          var err;
          if ((err = validateSpecialTag(sot, sc, sct)) !== true) {
            return error(err.error);
          } else if ((err = isValidChildren(sot.name, sot.attributes, sc)) !== true) {
            return error(err.error);
          }
          return {
            'type': sot.name,
            'attributes': sot.attributes,
            'contents': sc
          };
        },
      peg$c31 = function(st, attrs) {
          return {
            'name': st,
            'attributes': _u.collapse(attrs)
          };
        },
      peg$c32 = /^[a-z]/,
      peg$c33 = peg$classExpectation([["a", "z"]], false, false),
      peg$c34 = function(st) { return ['script', 'style', 'title', 'iframe'].indexOf(_u.tagify(st)) !== -1; },
      peg$c35 = function(st) { return _u.tagify(st); },
      peg$c36 = "</",
      peg$c37 = peg$literalExpectation("</", false),
      peg$c38 = function(cs) { return _u.scriptify(cs);  },
      peg$c39 = "/",
      peg$c40 = peg$literalExpectation("/", false),
      peg$c41 = function(sc) {
          return {
            'name': sc
          };
        },
      peg$c42 = peg$otherExpectation("Tag"),
      peg$c43 = function(otn, sp, c, ctn) { return !isSelfClosing(otn.name) /* || otn.name === ctn.name */; },
      peg$c44 = function(otn, sp, c, ctn) {
          var err, attrs, parts = [];
          if (!otn.back) {
              return error("The " + esc(otn.name) + " element is missing part of its opening tag");
          } else if(!(ctn.front && ctn.back)) {
            // TODO: Find another solution without displaying unencoded brackets
            // if (!ctn.front) { parts.push('</'); }
            // if (!ctn.back) { parts.push('>'); }
            // return error("The <" + otn.name + "> tag is missing part (" + parts.join(', ') + ") of its closing tag");
            return error("The " + esc(otn.name) + " element is missing part of its closing tag");
          } else if (otn.name !== ctn.name) {
            return error("Expected open tag " + esc(otn.name) + " to match closing tag " + esc(ctn.name) + "");
          } /*else if (isSelfClosing(otn.name)) {
            return error("The " + esc(otn.name) + " tag is a void element and should not have a closing tag");
          }*/ else if (_u.has(attrs = checkAttributes(otn.name, otn.attributes, c), 'error')) {
            return error(attrs.error);
          } else if ((err = isValidChildren(otn.name, otn.attributes, c)) !== true) {
            return error(err.error);
          }
          return {
            'type': 'element',
            'void': false,
            'name': otn.name,
            'attributes': otn.attributes,
            'children': c
          };
        },
      peg$c45 = function(t, attrs, cl, e) {
          var attrs;
          if(!canBeSelfClosing(t)) {
            return error("" + esc(t) + "" + " is not a valid self closing tag");
          }

          if (_u.has(attrs = checkAttributes(t, _u.collapse(attrs)), 'error')) {
            return error(attrs.error);
          }

          return {
            'type': 'element',
            'void': true,
            'name': t,
            'attributes': attrs,
            'children': []
          };
        },
      peg$c46 = peg$otherExpectation("Self-closing Tag"),
      peg$c47 = function(ot) {
          var attrs;
          if (!ot.back) {
            return error("The " + esc(ot.name) + " element is missing part of its opening tag");
          } else if(!isSelfClosing(ot.name)) {
            return error("" + esc(ot.name) + "" + " is not a valid self closing tag");
          }

          if (false && ot.closing !== null) {
            /*
            TODO: Note - This is where you would toggle on/off the error thrown when using the XHTML
                  method of a self-closing tag.
            */
            return error("The XHTML self-closing tag format for " + esc(ot.name) + " is not allowed in HTML 5");
          } else if (_u.has(attrs = checkAttributes(ot.name, ot.attributes), 'error')) {
            return error(attrs.error);
          }

          return {
            'type': 'element',
            'void': true,
            'name': ot.name,
            'attributes': ot.attributes,
            'children': []
          };
          // return "<" + ot + ">";
        },
      peg$c48 = peg$otherExpectation("Opening Tag"),
      peg$c49 = function(t, attrs, cl, e) {
          return {
            'name': t,
            'attributes': _u.collapse(attrs),
            'closing': cl,
            'back': e !== null
          };
        },
      peg$c50 = peg$otherExpectation("Closing Tag"),
      peg$c51 = function(o, t, c) {
          return {
            'name': t,
            'front': o !== null,
            'back': c !== null
          };
        },
      peg$c52 = peg$otherExpectation("Tag Name"),
      peg$c53 = /^[A-Za-z]/,
      peg$c54 = peg$classExpectation([["A", "Z"], ["a", "z"]], false, false),
      peg$c55 = /^[0-9A-Z_a-z\-]/,
      peg$c56 = peg$classExpectation([["0", "9"], ["A", "Z"], "_", ["a", "z"], "-"], false, false),
      peg$c57 = function(tns, tne) {
          var tn = [tns].concat(tne);
          return _u.option('settings/preserveCase', null, codex) ? _u.textNode(tn) : _u.tagify(tn);
        },
      peg$c58 = peg$otherExpectation("Attribute"),
      peg$c59 = function(ta, t) {
          return {
            'name': ta,
            'value': t
          };
        },
      peg$c60 = peg$otherExpectation("Attribute Name"),
      peg$c61 = /^[^=\/\\ <>]/,
      peg$c62 = peg$classExpectation(["=", "/", "\\", " ", "<", ">"], true, false),
      peg$c63 = function(n) { return n.length; },
      peg$c64 = function(n) {
          return _u.option('settings/preserveCase', null, codex) ? _u.textNode(n) : _u.tagify(n);
        },
      peg$c65 = peg$otherExpectation("Attribute Value (Double Quoted)"),
      peg$c66 = "\"",
      peg$c67 = peg$literalExpectation("\"", false),
      peg$c68 = /^[^"]/,
      peg$c69 = peg$classExpectation(["\""], true, false),
      peg$c70 = function(v) { return { 'value': _u.textNode(v), 'unquoted': false }; },
      peg$c71 = /^[s]/,
      peg$c72 = peg$classExpectation(["s"], false, false),
      peg$c73 = function(v) { return { 'value': '', 'unquoted': false }; },
      peg$c74 = peg$otherExpectation("Attribute Value (Single Quoted)"),
      peg$c75 = "'",
      peg$c76 = peg$literalExpectation("'", false),
      peg$c77 = /^[^']/,
      peg$c78 = peg$classExpectation(["'"], true, false),
      peg$c79 = peg$otherExpectation("Attribute Value (Unquoted)"),
      peg$c80 = /^[^ >]/,
      peg$c81 = peg$classExpectation([" ", ">"], true, false),
      peg$c82 = function(v) { return { 'value': _u.textNode(v), 'unquoted': true }; },
      peg$c83 = peg$otherExpectation("Attribute Value"),
      peg$c84 = peg$otherExpectation("Attribute Assignment"),
      peg$c85 = "=",
      peg$c86 = peg$literalExpectation("=", false),
      peg$c87 = function(i) {
          // NOTE: equal sign in <meta> tag attribute values, quotes in <style> tags
          if(i == null) {
            return error("Found an attribute assignment " + esc.val('=') + " not followed by a value");
          } else {
            // TODO: Move this this check up to a place where tag name is available
            // TODO: & could be allowed in event attributes
            if (i.unquoted) {
              // Note: https://html.spec.whatwg.org/multipage/syntax.html#attribute-value-(unquoted)-state
              var disallowed = /[ \f\n\r\t\v\/<>&"'`=]+/;
              if (disallowed.test(i.value)) {
                var matches = i.value.match(disallowed);
                return error("Disallowed character " + esc.val(matches[0]) + " found in attribute value");
              }
            } else {
              // Note: https://html.spec.whatwg.org/multipage/syntax.html#attribute-value-(double-quoted)-state
              if (/&([\S]+);/g.test(i.value)) {
                var namedReferences = _u.option('namedReferences', null, codex);
                var matches;
                var disallowed = /&([\S]+);/g;
                while ((matches = disallowed.exec(i.value)) !== null) {
                  // Note: The value should only be disallowed if it is not in this list https://www.w3.org/TR/html5/entities.json
                  if (namedReferences.indexOf(matches[1]) === -1) {
                    return error("Ambiguous named reference " + esc(matches[1]) + " not allowed in double-quoted attribute value");
                  }
                }
              }
            }
          }
          return _u.option('settings/verbose', null, codex) ? i : i.value;
        },
      peg$c88 = peg$otherExpectation("Text Node"),
      peg$c89 = function(tn) {
        return {
          'type': 'text',
          'contents': tn
        };
      },
      peg$c90 = peg$otherExpectation("Block Comment"),
      peg$c91 = function(com, cc) {
          if (cc === null) {
            return error('Found an open HTML comment tag without a closing tag');
          }
          return com;
        },
      peg$c92 = peg$otherExpectation("Comment Start"),
      peg$c93 = "<!--",
      peg$c94 = peg$literalExpectation("<!--", false),
      peg$c95 = peg$otherExpectation("Comment Close"),
      peg$c96 = "-->",
      peg$c97 = peg$literalExpectation("-->", false),
      peg$c98 = function(cb) {
          var tn = cb !== null ? _u.textNode(cb) : '';
          if(tn.indexOf('--') !== -1) {
            return error("Cannot have two or more consecutive hyphens " + esc.val('--') + " inside of a block comment");
          }
          return {
            'type': 'comment',
            'conditional': false,
            'condition': null,
            'children': {
              'type': 'text',
              'contents': tn
            }
          };
        },
      peg$c99 = function(cs) { return _u.textNode(cs);  },
      peg$c100 = function(cons, com, cone) { return cons === null && cone === null; },
      peg$c101 = function(cons, com, cone) {
          var condition = '';
          if (cone === null) {
            return error("Conditional comment start tag found without conditional comment end tag");
          } else if (cons === null) {
            return error("Conditional comment end tag found without conditional comment start tag");
          } else {
            condition = cons;
          }
          return {
            'type': 'comment',
            'conditional': true,
            'condition': condition,
            'children': com
          };
        },
      peg$c102 = "[",
      peg$c103 = peg$literalExpectation("[", false),
      peg$c104 = /^[^\]]/,
      peg$c105 = peg$classExpectation(["]"], true, false),
      peg$c106 = "]>",
      peg$c107 = peg$literalExpectation("]>", false),
      peg$c108 = function(csc) { return _u.tagify(csc); },
      peg$c109 = "endif",
      peg$c110 = peg$literalExpectation("endif", false),
      peg$c111 = "]",
      peg$c112 = peg$literalExpectation("]", false),
      peg$c113 = function() { return true; },
      peg$c114 = /^[^<>]/,
      peg$c115 = peg$classExpectation(["<", ">"], true, false),
      peg$c116 = function(cs) { return _u.textNode(cs); },
      peg$c117 = peg$otherExpectation("Anything"),
      peg$c118 = peg$otherExpectation("Characters"),
      peg$c119 = function(c) { return _u.textNode(c); },
      peg$c120 = peg$otherExpectation("Enforced Whitespace"),
      peg$c121 = /^[ \f\n\r\t\x0B]/,
      peg$c122 = peg$classExpectation([" ", "\f", "\n", "\r", "\t", "\x0B"], false, false),
      peg$c123 = peg$otherExpectation("Optional Whitespace"),

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsestart() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsedoctype();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parses();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecontent();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c0(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedoctype() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$currPos;
    peg$silentFails++;
    if (input.substr(peg$currPos, 2) === peg$c2) {
      s4 = peg$c2;
      peg$currPos += 2;
    } else {
      s4 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c3); }
    }
    if (s4 === peg$FAILED) {
      s4 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 60) {
        s5 = peg$c4;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c5); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parses();
        if (s6 !== peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c6) {
            s7 = peg$c6;
            peg$currPos += 6;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c7); }
          }
          if (s7 !== peg$FAILED) {
            s5 = [s5, s6, s7];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s4 === peg$FAILED) {
      s3 = void 0;
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c8); }
      }
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$currPos;
      s3 = peg$currPos;
      peg$silentFails++;
      if (input.substr(peg$currPos, 2) === peg$c2) {
        s4 = peg$c2;
        peg$currPos += 2;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c3); }
      }
      if (s4 === peg$FAILED) {
        s4 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 60) {
          s5 = peg$c4;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c5); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parses();
          if (s6 !== peg$FAILED) {
            if (input.substr(peg$currPos, 6) === peg$c6) {
              s7 = peg$c6;
              peg$currPos += 6;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c7); }
            }
            if (s7 !== peg$FAILED) {
              s5 = [s5, s6, s7];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = void 0;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c8); }
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    }
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c2) {
        s2 = peg$c2;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c3); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        if (peg$c9.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c10); }
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (peg$c9.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c10); }
            }
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parses();
          if (s4 !== peg$FAILED) {
            s5 = [];
            if (peg$c11.test(input.charAt(peg$currPos))) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c12); }
            }
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              if (peg$c11.test(input.charAt(peg$currPos))) {
                s6 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c12); }
              }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parses();
              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 62) {
                  s7 = peg$c13;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c14); }
                }
                if (s7 !== peg$FAILED) {
                  peg$savedPos = peg$currPos;
                  s8 = peg$c15(s1, s3, s5);
                  if (s8) {
                    s8 = void 0;
                  } else {
                    s8 = peg$FAILED;
                  }
                  if (s8 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c16(s1, s3, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c1); }
    }

    return s0;
  }

  function peg$parsecontent() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsenode();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsenode();
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c18(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c17); }
    }

    return s0;
  }

  function peg$parsenode() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsenode_types();
    if (s1 !== peg$FAILED) {
      s2 = peg$parses();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c20(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c19); }
    }

    return s0;
  }

  function peg$parsenode_types() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parsetag();
    if (s0 === peg$FAILED) {
      s0 = peg$parsecomment();
      if (s0 === peg$FAILED) {
        s0 = peg$parsetext_node();
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c21); }
    }

    return s0;
  }

  function peg$parsecomment_nodes() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parsetag();
    if (s0 === peg$FAILED) {
      s0 = peg$parsetext_node();
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c22); }
    }

    return s0;
  }

  function peg$parsetag() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseiframe_tag();
    if (s0 === peg$FAILED) {
      s0 = peg$parsespecial_tag();
      if (s0 === peg$FAILED) {
        s0 = peg$parseself_closing_tag_shortcut();
        if (s0 === peg$FAILED) {
          s0 = peg$parsenormal_tag();
          if (s0 === peg$FAILED) {
            s0 = peg$parseself_closing_tag();
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c23); }
    }

    return s0;
  }

  function peg$parseiframe_tag() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsespecial_tag_open();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsestart();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsespecial_tag_close();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = peg$currPos;
          s4 = peg$c25(s1, s2, s3);
          if (s4) {
            s4 = void 0;
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = peg$currPos;
            s5 = peg$c26(s1, s2, s3);
            if (s5) {
              s5 = void 0;
            } else {
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c27(s1, s2, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c24); }
    }

    return s0;
  }

  function peg$parsespecial_tag() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsespecial_tag_open();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsespecial_tag_content();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsespecial_tag_close();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = peg$currPos;
          s4 = peg$c29(s1, s2, s3);
          if (s4) {
            s4 = void 0;
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c30(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c28); }
    }

    return s0;
  }

  function peg$parsespecial_tag_open() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 60) {
      s1 = peg$c4;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c5); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parses();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsespecial_tag_types();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parsetag_attribute();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parsetag_attribute();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parses();
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 62) {
                s6 = peg$c13;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c14); }
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c31(s3, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsespecial_tag_types() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$c32.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c33); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c32.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c33); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c34(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c35(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsespecial_tag_content() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$currPos;
    peg$silentFails++;
    if (input.substr(peg$currPos, 2) === peg$c36) {
      s4 = peg$c36;
      peg$currPos += 2;
    } else {
      s4 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c37); }
    }
    peg$silentFails--;
    if (s4 === peg$FAILED) {
      s3 = void 0;
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c8); }
      }
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$currPos;
      s3 = peg$currPos;
      peg$silentFails++;
      if (input.substr(peg$currPos, 2) === peg$c36) {
        s4 = peg$c36;
        peg$currPos += 2;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c37); }
      }
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = void 0;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c8); }
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c38(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsespecial_tag_close() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 60) {
      s1 = peg$c4;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c5); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parses();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 47) {
          s3 = peg$c39;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c40); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parses();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsespecial_tag_types();
            if (s5 !== peg$FAILED) {
              s6 = peg$parses();
              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 62) {
                  s7 = peg$c13;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c14); }
                }
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c41(s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsenormal_tag() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseopen_tag();
    if (s1 !== peg$FAILED) {
      s2 = peg$parses();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecontent();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseclose_tag();
          if (s4 !== peg$FAILED) {
            peg$savedPos = peg$currPos;
            s5 = peg$c43(s1, s2, s3, s4);
            if (s5) {
              s5 = void 0;
            } else {
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c44(s1, s2, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c42); }
    }

    return s0;
  }

  function peg$parseself_closing_tag_shortcut() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 60) {
      s1 = peg$c4;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c5); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parses();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsetagname();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parsetag_attribute();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parsetag_attribute();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parses();
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 47) {
                s6 = peg$c39;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c40); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parses();
                if (s7 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 62) {
                    s8 = peg$c13;
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c14); }
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parses();
                    if (s9 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c45(s3, s4, s6, s8);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseself_closing_tag() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseopen_tag();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c47(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c46); }
    }

    return s0;
  }

  function peg$parseopen_tag() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 60) {
      s1 = peg$c4;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c5); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parses();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsetagname();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parsetag_attribute();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parsetag_attribute();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parses();
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 47) {
                s6 = peg$c39;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c40); }
              }
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parses();
                if (s7 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 62) {
                    s8 = peg$c13;
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c14); }
                  }
                  if (s8 === peg$FAILED) {
                    s8 = null;
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parses();
                    if (s9 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c49(s3, s4, s6, s8);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c48); }
    }

    return s0;
  }

  function peg$parseclose_tag() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c36) {
      s1 = peg$c36;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c37); }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parses();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsetagname();
        if (s3 !== peg$FAILED) {
          s4 = peg$parses();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 62) {
              s5 = peg$c13;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c14); }
            }
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c51(s1, s3, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c50); }
    }

    return s0;
  }

  function peg$parsetagname() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (peg$c53.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c54); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$c55.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c56); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$c55.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c56); }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c57(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c52); }
    }

    return s0;
  }

  function peg$parsetag_attribute() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsee();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetag_attribute_name();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseattr_assignment();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c59(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c58); }
    }

    return s0;
  }

  function peg$parsetag_attribute_name() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parses();
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$c61.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c62); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$c61.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c62); }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = peg$currPos;
        s3 = peg$c63(s2);
        if (s3) {
          s3 = void 0;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c64(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c60); }
    }

    return s0;
  }

  function peg$parsetag_attribute_value_dblquote() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parsetag_attribute_value_dblquote_empty();
    if (s0 === peg$FAILED) {
      s0 = peg$parsetag_attribute_value_dblquote_value();
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c65); }
    }

    return s0;
  }

  function peg$parsetag_attribute_value_dblquote_value() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c66;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c67); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$c68.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c69); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$c68.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c69); }
        }
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s3 = peg$c66;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c67); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c70(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetag_attribute_value_dblquote_empty() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c66;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c67); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$c71.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c72); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$c71.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c72); }
        }
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s3 = peg$c66;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c67); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c73(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetag_attribute_value_singlequote() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parsetag_attribute_value_singlequote_empty();
    if (s0 === peg$FAILED) {
      s0 = peg$parsetag_attribute_value_singlequote_value();
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c74); }
    }

    return s0;
  }

  function peg$parsetag_attribute_value_singlequote_value() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 39) {
      s1 = peg$c75;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c76); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$c77.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c78); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$c77.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c78); }
        }
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 39) {
          s3 = peg$c75;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c76); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c70(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetag_attribute_value_singlequote_empty() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 39) {
      s1 = peg$c75;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c76); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$c71.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c72); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$c71.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c72); }
        }
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 39) {
          s3 = peg$c75;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c76); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c73(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetag_attribute_value_noquote() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    if (peg$c80.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c81); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c80.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c81); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c82(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c79); }
    }

    return s0;
  }

  function peg$parsetag_attribute_value() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parsetag_attribute_value_dblquote();
    if (s0 === peg$FAILED) {
      s0 = peg$parsetag_attribute_value_singlequote();
      if (s0 === peg$FAILED) {
        s0 = peg$parsetag_attribute_value_noquote();
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c83); }
    }

    return s0;
  }

  function peg$parseattr_assignment() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parses();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 61) {
        s2 = peg$c85;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c86); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parses();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsetag_attribute_value();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c87(s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c84); }
    }

    return s0;
  }

  function peg$parsetext_node() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsechars();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c89(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c88); }
    }

    return s0;
  }

  function peg$parsecomment() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsecomment_open();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsecomment_content();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecomment_close();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c91(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c90); }
    }

    return s0;
  }

  function peg$parsecomment_open() {
    var s0, s1;

    peg$silentFails++;
    if (input.substr(peg$currPos, 4) === peg$c93) {
      s0 = peg$c93;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c94); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c92); }
    }

    return s0;
  }

  function peg$parsecomment_close() {
    var s0, s1;

    peg$silentFails++;
    if (input.substr(peg$currPos, 3) === peg$c96) {
      s0 = peg$c96;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c97); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c95); }
    }

    return s0;
  }

  function peg$parsecomment_content() {
    var s0;

    s0 = peg$parsecomment_conditional();
    if (s0 === peg$FAILED) {
      s0 = peg$parsecomment_block();
    }

    return s0;
  }

  function peg$parsecomment_block() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parses();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsecomment_scan();
      if (s2 !== peg$FAILED) {
        s3 = peg$parses();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c98(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecomment_scan() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$currPos;
    peg$silentFails++;
    s4 = peg$parsecomment_close();
    peg$silentFails--;
    if (s4 === peg$FAILED) {
      s3 = void 0;
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c8); }
      }
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$currPos;
      s3 = peg$currPos;
      peg$silentFails++;
      s4 = peg$parsecomment_close();
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = void 0;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c8); }
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c99(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsecomment_conditional_scan() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$currPos;
    peg$silentFails++;
    s4 = peg$parseconditional_end();
    peg$silentFails--;
    if (s4 === peg$FAILED) {
      s3 = void 0;
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c8); }
      }
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$currPos;
      s3 = peg$currPos;
      peg$silentFails++;
      s4 = peg$parseconditional_end();
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = void 0;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c8); }
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c38(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsecomment_conditional() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parses();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseconditional_start();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parses();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsecomment_conditional_scan();
          if (s4 !== peg$FAILED) {
            s5 = peg$parses();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseconditional_end();
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parses();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = peg$currPos;
                  s8 = peg$c100(s2, s4, s6);
                  if (s8) {
                    s8 = peg$FAILED;
                  } else {
                    s8 = void 0;
                  }
                  if (s8 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c101(s2, s4, s6);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseconditional_start() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c102;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c103); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parses();
      if (s2 !== peg$FAILED) {
        s3 = [];
        if (peg$c104.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c105); }
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (peg$c104.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c105); }
            }
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parses();
          if (s4 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c106) {
              s5 = peg$c106;
              peg$currPos += 2;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c107); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c108(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseconditional_end() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c2) {
      s1 = peg$c2;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c3); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parses();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 91) {
          s3 = peg$c102;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c103); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parses();
          if (s4 !== peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c109) {
              s5 = peg$c109;
              peg$currPos += 5;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c110); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parses();
              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 93) {
                  s7 = peg$c111;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c112); }
                }
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c113();
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecomment_conditional_body() {
    var s0;

    s0 = peg$parseconditional_scan();

    return s0;
  }

  function peg$parseconditional_scan() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$currPos;
    peg$silentFails++;
    s4 = peg$parseconditional_terminator();
    peg$silentFails--;
    if (s4 === peg$FAILED) {
      s3 = void 0;
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      if (peg$c114.test(input.charAt(peg$currPos))) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c115); }
      }
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$currPos;
      s3 = peg$currPos;
      peg$silentFails++;
      s4 = peg$parseconditional_terminator();
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = void 0;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        if (peg$c114.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c115); }
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c116(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseconditional_terminator() {
    var s0;

    s0 = peg$parseconditional_end();
    if (s0 === peg$FAILED) {
      s0 = peg$parsecomment_close();
    }

    return s0;
  }

  function peg$parseany() {
    var s0, s1;

    peg$silentFails++;
    if (input.length > peg$currPos) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c8); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c117); }
    }

    return s0;
  }

  function peg$parsechars() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    if (peg$c114.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c115); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c114.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c115); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c119(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c118); }
    }

    return s0;
  }

  function peg$parsee() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    if (peg$c121.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c122); }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        if (peg$c121.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c122); }
        }
      }
    } else {
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c120); }
    }

    return s0;
  }

  function peg$parses() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    if (peg$c121.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c122); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      if (peg$c121.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c122); }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c123); }
    }

    return s0;
  }


        // Parser utilities
    var _u = require('./html-parser-util'),
        esc = _u.escape,
        // Codex of tag and attribute names
        codex = require('./html-grammar-codex')(options);

    // Set error encoding
    _u.setFormat(codex);

    // Verification Functions

    function isSelfClosing(tag, path) {
      var usePath = path || 'tags/void',
          tags = _u.option(usePath, null, codex);
      return tags != null ? _u.customTest.apply(this, [usePath, tags, [tag]]) : false;
    }

    function canBeSelfClosing(tag) {
      return isSelfClosing(tag) || isSelfClosing(tag, 'tags/mixed');
    }

    function isAttributeAllowed(tag, attribute, value) {
    	return true;
      // var i, len, ref, shared, props,
      //     that = this,
      //     attrTest = function (tst) {
      //       return _u.customTest.apply(that, ['attributes/' + tst, props[tst], [attribute, value]]);
      //     };

      // // Find the rules for this tag in the options
      // props = _u.option('attributes', [tag, '_'], codex);

      // // Do not continue unless attribute options exist for this tag
      // if (props == null) { return true; }

      // /*
      //   The tag is allowed if it:
      //   a) exists in normal and has any value,
      //   b) exists in void and has no value,
      //   c) exists in mixed and has any or no value
      //   d) exists in conditional if conditions are met
      // */
      // if (_u.has(props, 'normal') && attrTest('normal')) {
      //   if (value == null) {
      //     return {
      //       'error': "The " + esc(tag) + " tag " + esc.attr(attribute) +
      //                " attribute requires a value"
      //     };
      //   }
      //   return true;
      // } else if (_u.has(props, 'void') && attrTest('void')) {
      //   if (value != null) {
      //     return {
      //       'error': "The " + esc(tag) + " tag " + esc.attr(attribute) +
      //                " attribute should not have a value"
      //     };
      //   }
      //   return true;
      // } else if (_u.has(props, 'mixed') && attrTest('mixed')) {
      //   return true;
      // } else if (_u.has(props, 'conditional') && attrTest('conditional')) {
      //   // Does not need to be evaluated further here
      //   return true;
      // } else if(_u.has(props, 'boolean') && attrTest('boolean')) {
      //   // boolean attributes just need to exist to be true
      //   return true
      // }

      // return {
      //   'error': "The " + esc(tag) + " tag does not have a " +
      //            esc.attr(attribute) + " attribute"
      // };
    }

    function checkAttributes(tag, attributes, contents) {
      var i, len, ref, req, name, value, rule, props, err, ok = {
        'value': attributes
      }, names = Object.keys(attributes);

      // If there is any weird stuff in the names, do not continue
      for (i = 0, len = names.length; i < len; i++) {
        if (/[\/\>\"\'\= ]/.test(names[i])) {
          return {
            'error': 'The ' + esc(tag) + ' element has an attribute ' +
                     esc.attr(names[i]) + ' with an invalid name'
          };
        }
      }

      // If the tag is not in the codex then allow anything
      props = _u.option('attributes', [tag, '_'], codex);

      if (props == null) { return ok; }

      // Check if all the required attributes are present
      if (_u.has(props, 'required')) {
        ref = props['required'];
        for (i = 0, len = ref.length; i < len; i++) {
          req = ref[i];
          rule = _u.customTest.apply(this, ['attributes/required', req, [attributes, contents]]);
          if (rule !== true) {
            if (rule === false) {
              return {
                'error': "The " + esc(tag) + " tag must include a " + esc.attr(req) +
                         " attribute"
              };
            } else {
              return rule;
            }
          }
        }
      }

      // Make sure each attribute is allowed validated
      for (name in attributes) {
        value = attributes[name];
        if ((err = isAttributeAllowed(tag, name, value)) !== true) {
          return err;
        }
      }

      // Run any custom validation rules that exist
      if (_u.has(props, 'rules') && props['rules'] != null) {
        rule = _u.customTest.apply(this, ['attributes/rules', props['rules'], [attributes, contents, _u, codex]]);
        if (_u.has(rule, 'error')) {
          return rule;
        }
      }

      // Check conditional attributes
      if (_u.has(props, 'conditional')) {
        ref = props['conditions'];
        for (i = 0, len = ref.length; i < len; i++) {
          if (_u.isFunc(ref[i]) && (rule = ref[i].apply(this, [attributes, _u, codex])) !== true) {
            return rule;
          }
        }
      }

      return ok;
    }

    function validateSpecialTag(sot, sc, sct) {
      var attrs = checkAttributes(sot.name, sot.attributes, sc);
      if (sct === null) {
        return {
          'error': "Found an open " + esc(sot.name) + " tag without a closing " +
                   esc(sot.name) + " tag"
        };
      } else if (sot.name !== sct.name) {
        return {
          'error': "Expected open tag " + esc(sot.name) + " to match closing tag " +
                   esc(sct.name) + ""
        };
      } else if (attrs.error != null) {
        return attrs;
      }
      return true;
    }


    // TODO: Is it possible to move this to the codex?
     function isValidChildren(tag, attributes, children) {
     	return true;
      // /*
      //   Special rules apply for the position of certain elements in the document.
      //   We can look at the children for specific elements to determine if
      //   anything is in a place it is not allowed.
      // */
      // // TODO: Each of these needs a corresponding test
      // var countTitle, countLink, countMeta;
      // switch (tag) {
      //   case 'head':
      //     countTitle = _u.countWhere(children, {'type': 'title'});
      //     if (countTitle < 1) {
      //       return {
      //         'error': "The document will not validate as HTML if you omit the " +
      //                  esc('title') + " tag in the document " + esc('head') + " section"
      //       };
      //     } else if (countTitle > 1) {
      //       return {
      //         'error': "You can not have more than one " +
      //                  esc('title') + " element in an HTML document"
      //       };
      //     }
      //     break;
      //   default:
      //     if (_u.isArray(children) && children.length > 0) {
      //       countLink = _u.countWhere(children, {'type': 'element', 'name': 'link'});
      //       if (countLink > 0) {
      //         return {
      //           'error': "The " + esc('link') + " element goes only in the " +
      //                    esc('head') + " section of an HTML document"
      //         };
      //       }
      //       countMeta = _u.countWhere(children, {'type': 'element', 'name': 'meta'});
      //       if (countMeta > 0) {
      //         return {
      //           'error': "The " + esc('meta') + " element goes only in the " +
      //                    esc('head') + " section of an HTML document"
      //         };
      //       }
      //       // Process one level deep so that trace is as accurate as possible
      //       if (_u.find(children, function (child) {
      //         if (child['type'] === 'style' && !_u.has(child.attributes, 'scoped')) {
      //           return true;
      //         }
      //         return false;
      //       }) !== undefined) {
      //         return {
      //           'error': "If the " + esc.attr('scoped') + " attribute is not used, each " +
      //                    esc('style') + " tag must be located in the " +
      //                    esc('head') + " section"
      //         };
      //       }
      //     }
      //     break;
      // }
      // return true;
    }


  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};
